# Platform specific data  -------------------------------------------------------------------------
# The following variables are specific to the platform used
# and should be common to all IPS simulations on that platform.  Therefore these are
# defined in a platform specific configuration file e.g. "franklin.config" which is
# read by the framework and combined with this config file.  The path to the platform
# config file is specified on the ips command line.
# Platform config settings can be over-ridden by uncommenting any of the lines below and
# supplying new values

#HOST =
#MPIRUN =
#PHYS_BIN_ROOT =
#DATA_TREE_ROOT =
#PORTAL_URL = http://swim-new.gat.com:8080/monitor
#RUNID_URL  = http://swim-new.gat.com:4040/runid.esp


# User specific data ------------------------------------------------------------------------------
# The following data is specific to the user.  These global parameters are used later in
# this config file to define component config parameters.  The intent is to gather user
# specific data into one place to make it easier to exchange config files between users.

#USER_W3_DIR = /project/projectdirs/m876/www/sfoley
#USER_W3_BASEURL = http://portal.nersc.gov/project/m876/sfoley


# Simulation specific data -------------------------------------------------------------------------

RUN_ID = Hello_world                   # Indentifier for this simulation run
TOKAMAK_ID = TEST
SHOT_NUMBER = 1                  # Numerical identifier for specific case

SIM_NAME =  ${RUN_ID}_${SHOT_NUMBER}_sub

OUTPUT_PREFIX =
LOG_FILE = ${SIM_NAME}_sim.log
LOG_LEVEL = INFO

# Root of IPS component and binary tree
IPS_ROOT = /home/elwasif/Projects/SWIM/ipsframework-code/trunk/install

# Simulation root - path of the simulation directory that will be constructed by the framework
TEST_ROOT = $PWD
SIM_ROOT = $TEST_ROOT/hello_examples_sub

# Stuff for connecting to the SWIM portal
RUN_COMMENT = Hello world Sub demo
TAG = Hello world Sub demo					# A tag that enables related runs to be retrieved together
USER = ssfoley					# Optional, if missing the unix username is used

# SIMULATION_MODE = NORMAL or RESTART.  For RESTART must specify a restart time and restart
# directory.  The restart time must coincide with a checkpoint save time.  The restart
# directory can be specified as $SIM_ROOT if there is an existing current simulation there.
# This will append to the current simulation

SIMULATION_MODE = NORMAL
RESTART_TIME =
RESTART_DIRECTORY = $SIM_ROOT

# Where to put plasma state files as the simulation evolves
PLASMA_STATE_WORK_DIR = $SIM_ROOT/work/plasma_state

# Config variables defining simulation specific names for plasma state files
CURRENT_STATE = ${SIM_NAME}_ps.cdf
# List of files that constitute the plasma state
STATE_FILES = $CURRENT_STATE

# Names of ports to be used in this simulation.
# An implementation and configuration must be specified for each port.

[PORTS]
   NAMES = DRIVER WORKER

# DRIVER port is called by the framework.  It is required, causes exception.

   [[DRIVER]]                                       # REQUIRED Port section
      IMPLEMENTATION = HELLO_DRIVER

# INIT port is called by the framework.  It typically produces the very first set of
# plasma state files for SIMULATION_MODE = NORMAL.  It does not raise and exception
# if missing.

   [[INIT]]
      IMPLEMENTATION =

# Specification of IMPLEMENTATION for each physics port called out in PORTS list.
# Additional specifications may be present that are not in the PORTS list

  [[WORKER]]
      IMPLEMENTATION = HELLO_WORKER

# Specification of configuration for each port called out in PORTS list.
# Additional specifications may be present that are not in the PORTS list
# NAME variable MUST match the name of the python class that implements the component

[HELLO_DRIVER]
    CLASS = DRIVERS
    SUB_CLASS = HELLOSUB
    NAME = HelloDriver
    NPROC = 1
    BIN_PATH = $TEST_ROOT
    INPUT_DIR = $IPS_ROOT/components/drivers/hello
    INPUT_FILES =
    OUTPUT_FILES = sub_out.txt
    SCRIPT = $TEST_ROOT/hello_driver_sub.py

[HELLO_WORKER]
    CLASS = WORKERSSUB
    SUB_CLASS = HELLO
    NAME = HelloWorker
    NPROC = 1
    BIN_PATH = $TEST_ROOT
    INPUT_DIR = $IPS_ROOT/components/drivers/hello
    INPUT_FILES =
    OUTPUT_FILES =
    SCRIPT = $TEST_ROOT/hello_worker_sub.py

# Time loop sepecification (two modes for now) EXPLICIT | REGULAR
# For MODE = REGULAR, the framework uses the variables START, FINISH, and NSTEP
# For MODE = EXPLICIT, the frame work uses the variable VALUES (space separated list of time values)

[TIME_LOOP]
   MODE = REGULAR
   START = 0
   FINISH = 1
   NSTEP  = 1

