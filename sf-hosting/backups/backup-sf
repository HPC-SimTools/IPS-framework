#!/bin/sh
# Backup a SourceForge project
#
usage="$0 config_file backup_dest"
#
# Current Capabilities (y=tested, i=implemented but untested)
# Tool       Classic   Allura   Notes
# SCM
#    BZR     n         n/a
#    CVS     n         n/a
#    GIT     y         i
#    HG      n         n
#    SVN     i         y
# PRWEB      y         y        filtering not implemented
# FRS        y         y        filtering not implemented
# LISTS      y         y        mboxes and roster
# WIKI       n         n
# FORUMS     n         n
# TICKETS    n         n
# MYSQL      n         n

# To get more information about rsync transfers
#stats=--stats
stats=

# Assume user's mailman administration information is in this file
mailman="$HOME/.mailman"

# Process arguments
if [ $# -ne 2 ]; then
  echo "Usage: $usage"
  exit 1
fi

config=$1
shift 1

dest_dir=$1
shift 1

# Check arguments
if [ -r $config ]; then
  # source uses the path to locate the file, which means that a file
  # in the current directory needs a leading "./"
  if [ `dirname $config` = "." ]; then
    config="./$config"
  fi

  source $config
else
  echo "ERROR: cannot read configuration file: $config"
  echo "Usage: $usage"
  exit 1
fi

if [ ! -d $dest_dir ]; then
  echo "ERROR: destination directory not found: $dest_dir"
  echo "Usage: $usage"
  exit 1
fi

# Check key entries from config file

if [ -z "$SF_PROJ" ]; then
  echo "ERROR: configuration file does not define SF_PROJ"
  exit 1
fi

# Check project type, and set defaults which differ by type
if [ -z "$SF_TYPE" ]; then
  echo "ERROR: configuration file does not define SF_TYPE"
  exit 1
else
  case $SF_TYPE in
    classic)
      # Note: these use the rsync server
      RSYNC_GIT_BASE="$SF_PROJ.git.sourceforge.net::gitroot/$SF_PROJ"
      RSYNC_SVN_BASE="$SF_PROJ.svn.sourceforge.net::svn/$SF_PROJ"
      RSYNC_HG_BASE="$SF_PROJ.hg.sourceforge.net::hgroot/$SF_PROJ"
    ;;
    allura)
      # Note: these use the rsync server
      RSYNC_SVN_BASE="svn.code.sourceforge.net::p/$SF_PROJ"
      RSYNC_GIT_BASE="git.code.sourceforge.net::p/$SF_PROJ"
      RSYNC_HG_BASE="hg.code.sourceforge.net::p/$SF_PROJ"
    ;;
    *)
      echo "ERROR: unknown SF_TYPE: $SF_TYPE"
      echo "INFO: recognized SF_TYPEs are 'classic' 'allura'"
      exit 1
      ;;
  esac
fi

# Construct ssh command
if [ -z "$SF_SSH_CMD" ]; then
  sshcmd="ssh"
else
  sshcmd="$SF_SSH_CMD"
fi

# Set defaults which are independent of project type
RSYNC_PRWEB="web.sourceforge.net:/home/project-web/$SF_PROJ"
RSYNC_FRS="frs.sourceforge.net:/home/frs/project/$SF_PROJ"

# Need to separate the host name
LIST_HOST="lists.sourceforge.net"
LIST_MBOX_BASE="https://$LIST_HOST/mbox/$SF_PROJ"
LIST_ROSTER_BASE="https://$LIST_HOST/lists/roster/$SF_PROJ"

# Change to the destination directory
cd $dest_dir || exit 1

# Process code repositories

if [ -n "$SCM_SVN" ]; then
  if [ $SF_TYPE = "classic" ]; then
    rsync $stats -a --delete "$RSYNC_SVN_BASE/" svn
  else
    for i in "$SCM_SVN"; do
      rsync $stats -a --delete "$RSYNC_SVN_BASE/$i" .
    done
  fi
fi

if [ -n "$SCM_GIT" ]; then
  for i in "$SCM_GIT"; do
    rsync $stats -a --delete "$RSYNC_GIT_BASE/$i" .
  done
fi

# Process project web
if [ -n "$PRWEB" ]; then
  if [ "$PRWEB" = "*" ]; then
    rsync $stats -a --delete -e "$sshcmd" "$RSYNC_PRWEB/" project-web/
  else
    for i in $PRWEB; do 
      rsync $stats -a --delete -e "$sshcmd" "$RSYNC_PRWEB/$i" project-web/
    done
  fi
fi

# Process file release service
if [ -n "$FRS" ]; then
  if [ "$FRS" = "*" ]; then
    rsync $stats -a --delete -e "$sshcmd" "$RSYNC_FRS/" frs/
  else
    for i in $FRS; do 
      rsync $stats -a --delete -e "$sshcmd" "$RSYNC_FRS/$i" frs/
    done
  fi
fi

# Retrieve mailing list archives
if [ -n "$LISTS" ]; then
  if [ ! -d list-archives ]; then
    mkdir list-archives
  fi
  cd list-archives || exit 1
  for i in $LISTS; do
    # Assumes .netrc or .wgetrc file has needed authentication information
    # Use --continue option to download only new portion
    wget -q --continue "$LIST_MBOX_BASE-$i"
  done
  cd .. || exit 1
fi

# Retrieve mailing list rosters
if [ -n "$LISTS" ]; then
  if [ ! -d list-rosters ]; then
    mkdir list-rosters
  fi
  cd list-rosters || exit 1
  for i in $LISTS; do
    # Extract authentication info from user file
    listname="$SF_PROJ-$i"

    # wget insists on versioning existing files, so remove prior version
    rm -f $listname

    auth=`awk '$1~/'$LIST_HOST'/ && \
         $2~/'$listname'/ \
         {printf "--post-data=roster-email=%s&roster-pw=%s\n", $3, $4}' \
         $mailman`

    wget -q $auth "$LIST_ROSTER_BASE-$i"
  done
  cd .. || exit 1
fi
