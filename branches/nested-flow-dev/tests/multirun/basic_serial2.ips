#PRE IPS_ROOT = /home/facets/dexter/builds/facetsall/simyan    # Root of IPS component and binary tree
#PRE FWK_COMPS_PATH = $IPS_ROOT    # Root of IPS component and binary tree
#PRE ALL_RUNS = /home/facets/dexter/all_runs
OUTPUT_PREFIX = 

RUN_COMMENT = testing basic concurrent component simulation capability
#PORTAL_URL = http://127.0.0.1:8000/monitor		# URL for the portal
#RUNID_URL  = httt://127.0.0.1:4040/runid.esp
#LOG_FILE = $IPS_ROOT/$SIM_NAME.log
#LOG_LEVEL = DEBUG                   # Possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL

RUN_ID = test                       # Indentifier for this simulation run
TOKAMAK_ID = basic_serial2          # Identifier for tokamak simulated
SHOT_NUMBER = 0                     # Identifier for specific case for this tokamak (not necessarily a number)

SIM_NAME = ${RUN_ID}_${TOKAMAK_ID}_${SHOT_NUMBER}   # Name of current simulation
SIM_ROOT = $SIM_NAME                      # Where to put results from this simulation
#PRE SIM_ROOT = $ALL_RUNS/$SIM_NAME                      # Where to put results from this simulation

PLASMA_STATE_WORK_DIR = $SIM_ROOT/work/plasma_state # Where to put plasma state files as the simulation evolves 
CURRENT_STATE = 
PRIOR_STATE = 
NEXT_STATE = 
CURRENT_EQDSK = 
USE_PORTAL=False

LOG_FILE = $SIM_ROOT/$SIM_NAME.log
LOG_LEVEL = DEBUG                   # Possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL

[PORTS]
   NAMES = DRIVER WORKER1 WORKER2 WORKER3
   
   [[DRIVER]]                                       # REQUIRED Port section 
      IMPLEMENTATION = BASIC_SERIAL1

   [[WORKER1]]
      IMPLEMENTATION = SMALL_WORKER

   [[WORKER2]]
      IMPLEMENTATION = MEDIUM_WORKER

   [[WORKER3]]
      IMPLEMENTATION = LARGE_WORKER

# Individual configuration sections

# Component sepcification (entries similar for all components)
# NAME entry MUST match the name of the python class that implements the component
[BASIC_CONCURRENT1]
    CLASS = drivers
    SUB_CLASS = testing
    NAME = basic_concurrent1
    NPROC = 1
    BIN_PATH = $IPS_ROOT/tests/components/drivers
    INPUT_FILES = file1 sfile1 sfile2 ofile1 ofile2
    OUTPUT_FILES = ofile1 ofile2  
    SCRIPT = $BIN_PATH/basic_concurrent1.py

[BASIC_CONCURRENT2]
    CLASS = drivers
    SUB_CLASS = testing
    NAME = basic_concurrent2
    NPROC = 1
    BIN_PATH = $IPS_ROOT/tests/components/drivers
    INPUT_FILES = file1 sfile1 sfile2 ofile1 ofile2
    OUTPUT_FILES = ofile1 ofile2  
    SCRIPT = $BIN_PATH/basic_concurrent2.py

[BASIC_CONCURRENT3]
    CLASS = drivers
    SUB_CLASS = testing
    NAME = basic_concurrent3
    NPROC = 1
    BIN_PATH = $IPS_ROOT/tests/components/drivers
    INPUT_FILES = file1 sfile1 sfile2 ofile1 ofile2
    OUTPUT_FILES = ofile1 ofile2  
    SCRIPT = $BIN_PATH/basic_concurrent3.py

[BASIC_SERIAL1]
    CLASS = drivers
    SUB_CLASS = testing
    NAME = basic_serial1
    NPROC = 1
    BIN_PATH = $IPS_ROOT/tests/components/drivers
    INPUT_FILES = file1 sfile1 sfile2 ofile1 ofile2
    OUTPUT_FILES = ofile1 ofile2  
    SCRIPT = $BIN_PATH/basic_serial1.py

[BASIC_SERIAL2]
    CLASS = drivers
    SUB_CLASS = testing
    NAME = basic_serial2
    NPROC = 1
    BIN_PATH = $IPS_ROOT/tests/components/drivers
    INPUT_FILES = file1 sfile1 sfile2 ofile1 ofile2
    OUTPUT_FILES = ofile1 ofile2  
    SCRIPT = $BIN_PATH/basic_serial2.py

[BASIC_SERIAL3]
    CLASS = drivers
    SUB_CLASS = testing
    NAME = basic_serial3
    NPROC = 1
    BIN_PATH = $IPS_ROOT/tests/components/drivers
    INPUT_FILES = file1 sfile1 sfile2 ofile1 ofile2
    OUTPUT_FILES = ofile1 ofile2  
    SCRIPT = $BIN_PATH/basic_serial3.py
  
[SMALL_WORKER]
    CLASS = workers
    SUB_CLASS = testing
    NAME = small_worker
    NPROC = 1
    BIN_PATH = $IPS_ROOT/tests/components/workers
    INPUT_FILES =
    OUTPUT_FILES = $CURRENT_STATE
    SCRIPT = $BIN_PATH/small_worker.py

[MEDIUM_WORKER]
    CLASS = workers
    SUB_CLASS = testing
    NAME = medium_worker
    NPROC = 1
    BIN_PATH = $IPS_ROOT/tests/components/workers
    INPUT_FILES =
    OUTPUT_FILES = $CURRENT_STATE
    SCRIPT = $BIN_PATH/medium_worker.py

[LARGE_WORKER]
    CLASS = workers
    SUB_CLASS = testing
    NAME = large_worker
    NPROC = 1
    BIN_PATH = $IPS_ROOT/tests/components/workers
    INPUT_FILES =
    OUTPUT_FILES = $CURRENT_STATE
    SCRIPT = $BIN_PATH/large_worker.py

[XL_WORKER]
    CLASS = workers
    SUB_CLASS = testing
    NAME = XL_worker
    NPROC = 1
    BIN_PATH = $IPS_ROOT/tests/components/workers
    INPUT_FILES =
    OUTPUT_FILES = $CURRENT_STATE
    SCRIPT = $BIN_PATH/XL_worker.py

# Time loop sepecification (two modes for now) EXPLICIT | REGULAR
# For MODE = REGULAR, the framework uses the variables START, FINIS, and NSTEP
# For MODE = EXPLICIT, the frame work uses the variable VALUES (space separated list of time values)

[TIME_LOOP]
   MODE = EXPLICIT
   START = 3.5
   FINISH = 3.7
   NSTEP  = 2
   VALUES = 3.4 3.5 3.6 3.7 3.8 3.9
