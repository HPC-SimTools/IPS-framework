# Platform specific data  -------------------------------------------------------------------------
# The following variables are specific to the platform used
# and should be common to all IPS simulations on that platform.  Therefore these are
# defined in a platform specific configuration file e.g. "franklin.config" which is
# read by the framework and combined with this config file.  The path to the platform
# config file is specified on the ips command line. 
# Platform config settings can be over-ridden by uncommenting any of the lines below and
# supplying new values

#HOST = 
#MPIRUN = 
#PHYS_BIN_ROOT = 
#DATA_TREE_ROOT =
#PORTAL_URL = 
#RUNID_URL  = 

# User specific data ------------------------------------------------------------------------------
# The following data is specific to the user.  These global parameters are used later in this config 
# file to define component config parameters.  The intent is to gather user specific data into one
# place to make it easier to exchange config files between users.

USER_W3_DIR = /project/projectdirs/m876/www/ssfoley
USER_W3_BASEURL = http://portal.nersc.gov/project/m876/ssfoley


# Simulation specific data -------------------------------------------------------------------------

RUN_ID = Model_seq             # Indentifier for this simulation run
TOKAMAK_ID = ITER
SHOT_NUMBER = 1              # Identifier for specific case for this tokamak (should be character integer)

SIM_NAME = ${RUN_ID}_${SHOT_NUMBER}

OUTPUT_PREFIX = 
LOG_FILE = ${RUN_ID}_sim.log 
LOG_LEVEL = DEBUG 

# Root of IPS component and binary tree
IPS_ROOT = /scratch/scratchdirs/ssfoley/ips
# Simulation root - path of the simulation directory that will be constructed by the framework
SIM_ROOT = /scratch/scratchdirs/ssfoley/${SIM_NAME}

# Stuff for connecting to the SWIM portal
RUN_COMMENT = restart at 12 sec equential model simulation using generic driver.py
TAG = sequential_model			# A tag that enables related runs to be retrieved together
USER = ssfoley					# Optional, if missing the unix username is used

# SIMULATION_MODE = NORMAL or RESTART.  For RESTART must specify a restart time and restart
# directory.  The restart time must coincide with a checkpoint save time.  The restart 
# directory can be specified as $SIM_ROOT if there is an existing current simulation there. 
# This will append to the current simulation

SIMULATION_MODE = RESTART 
RESTART_TIME = 12.0
RESTART_ROOT = $SIM_ROOT

# Where to put plasma state files as the simulation evolves
PLASMA_STATE_WORK_DIR = $SIM_ROOT/work/plasma_state

# Config variables defining simulation specific names for plasma state files
CURRENT_STATE = ${SIM_NAME}_ps.cdf
PRIOR_STATE = ${SIM_NAME}_psp.cdf
NEXT_STATE = ${SIM_NAME}_psn.cdf
CURRENT_EQDSK = ${SIM_NAME}_ps.geq
CURRENT_CQL = ${SIM_NAME}_ps_CQL.dat
CURRENT_DQL = ${SIM_NAME}_ps_DQL.nc
CURRENT_JSDSK = ${SIM_NAME}_ps.jso

# List of files that constitute the plasma state
PLASMA_STATE_FILES1 = $CURRENT_STATE $PRIOR_STATE  $NEXT_STATE $CURRENT_EQDSK
PLASMA_STATE_FILES2 = $CURRENT_CQL $CURRENT_DQL $CURRENT_JSDSK
PLASMA_STATE_FILES = $PLASMA_STATE_FILES1 $PLASMA_STATE_FILES2

# Names of ports to be used in this simulation.  
# An implementation and configuration must be specified for each port.

[PORTS]
   NAMES = INIT DRIVER MONITOR EPA RF_IC NB FUS

# Required ports - DRIVER and INIT   
   [[DRIVER]]
      IMPLEMENTATION = GENERIC_DRIVER 

   [[INIT]]
      IMPLEMENTATION = minimal_state_init 

# Physics ports

  [[RF_IC]]
      IMPLEMENTATION = model_RF_IC 

  [[FP]]
      IMPLEMENTATION = minority_model_FP
    
  [[FUS]]
      IMPLEMENTATION = model_FUS

  [[NB]]
      IMPLEMENTATION = model_NB

   [[EPA]]
      IMPLEMENTATION = model_EPA 
           
   [[MONITOR]]
      IMPLEMENTATION = monitor_comp_4

# Individual configuration sections

# Component configuration (entries similar for all components)
# NAME entry MUST match the name of the python class that implements the component

[minimal_state_init]
    CLASS = minimal_state_init
    SUB_CLASS = dbb
    NAME = minimal_state_init
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
        INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = 
        OUTPUT_FILES = $CURRENT_STATE
        RESTART_FILES = $PLASMA_STATE_FILES
    SCRIPT = $BIN_PATH/minimal_state_init.py

[GENERIC_DRIVER]
    CLASS = drivers
    SUB_CLASS = dbb
    NAME = generic_driver 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
        INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = 
        OUTPUT_FILES = 
        RESTART_FILES =
#        PLASMA_STATE_FILES = $CURRENT_STATE $PRIOR_STATE
    SCRIPT = $BIN_PATH/generic_driver.py
         
[model_EPA]
    CLASS = epa
    SUB_CLASS = model_epa
    NAME = model_EPA
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $DATA_TREE_ROOT/model_epa/ITER/hy040510/t20.0
        INPUT_STATE_FILE = hy040510_002_ps_epa__tsc_4_20.000.cdf
        INPUT_EQDSK_FILE = hy040510_002_ps_epa__tsc_4_20.000.geq 
        INPUT_FILES = model_epa_input.nml $INPUT_STATE_FILE $INPUT_EQDSK_FILE 
        OUTPUT_FILES = internal_state_data.nml
        PLASMA_STATE_FILES = $CURRENT_STATE $NEXT_STATE $CURRENT_EQDSK
        RESTART_FILES = $INPUT_FILES internal_state_data.nml
    SCRIPT = $BIN_PATH/model_epa_ps_file_init.py

[model_RF_IC]
    CLASS = rf
    SUB_CLASS = model_RF_IC
    NAME = model_RF_IC_2 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR =$DATA_TREE_ROOT/model_RF_IC 
        INPUT_FILES = model_RF_IC_input.nml
        OUTPUT_FILES = model_RF_IC_input.nml
        PLASMA_STATE_FILES = $CURRENT_STATE $CURRENT_EQDSK $CURRENT_CQL $CURRENT_DQL
        RESTART_FILES = $INPUT_FILES
    SCRIPT = $BIN_PATH/model_RF_IC_2_mcmd.py

[model_NB]
    CLASS = nb 
    SUB_CLASS = model_NB
    NAME = model_NB
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $DATA_TREE_ROOT/model_NB/init_from_cur_state 
        INPUT_FILES = model_NB_input.nml
        OUTPUT_FILES = internal_state_data.nml
        PLASMA_STATE_FILES = $CURRENT_STATE $CURRENT_EQDSK $CURRENT_JSDSK
        RESTART_FILES = $INPUT_FILES internal_state_data.nml
    SCRIPT = $BIN_PATH/model_NB_2_mcmd.py
    
[model_FUS] 
    CLASS = fus 
    SUB_CLASS = model_fus
    NAME = model_FUS 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $DATA_TREE_ROOT/model_FUS/init_from_cur_state
        INPUT_FILES = model_FUS_input.nml
        OUTPUT_FILES = internal_state_data.nml
        PLASMA_STATE_FILES = $CURRENT_STATE $CURRENT_EQDSK
        RESTART_FILES = $INPUT_FILES internal_state_data.nml
    SCRIPT = $BIN_PATH/model_FUS_2_mcmd.py

[monitor_comp_4]
    CLASS = monitor
    SUB_CLASS = 
    NAME = monitor
    NPROC = 1
    W3_DIR = $USER_W3_DIR              # Note this is user specific
    W3_BASEURL = $USER_W3_BASEURL      # Note this is user specific
    TEMPLATE_FILE= basic_time_traces.xml 
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/monitor/monitor_4
    INPUT_FILES = basic_time_traces.xml 
    OUTPUT_FILES = monitor_file.nc
    PLASMA_STATE_FILES = $CURRENT_STATE
    RESTART_FILES = $INPUT_FILES monitor_restart monitor_file.nc
    SCRIPT = $BIN_PATH/monitor_comp.py

# Checkpoint schedule -----------------------------------------------------------------------------
[CHECKPOINT]
   MODE = WALLTIME_REGULAR
   WALLTIME_INTERVAL = 15
   NUM_CHECKPOINT = 2
   PROTECT_FREQUENCY = 5  

# Time loop sepecification (two modes for now) EXPLICIT | REGULAR ---------------------------------
# For MODE = REGULAR, the framework uses the variables START, FINISH, and NSTEP
# For MODE = EXPLICIT, the frame work uses the variable VALUES (space separated list of time values)

[TIME_LOOP]
    MODE = REGULAR
    START = 12.0
    FINISH = 20.0 
    NSTEP = 4 


