########################################################
#            Paths and Run Name                        #
########################################################

IPS_ROOT = /u0/e/elwasif/ips/trunk    # *need to change* Root of IPS component and binary tree
OUTPUT_PREFIX = 

RUN_ID = Hello_world             # *need to change* Identifier for this simulation run
TOKAMAK_ID = TEST                # *need to change* Identifier for simulated  tokamak
SHOT_NUMBER = 1                  # *need to change* Numerical identifier for specific case

SIM_NAME = ${RUN_ID}_${TOKAMAK_ID}_${SHOT_NUMBER}  # Name of current simulation
SIM_ROOT = $IPS_ROOT/${SIM_NAME}                   # Where to put results from this simulation

########################################################
#            Portal and Logging                        #
########################################################

LOG_FILE = $SIM_ROOT/${RUN_ID}.log
LOG_LEVEL = DEBUG                       # Possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL

# Stuff for connecting to the portal - PORTAL_URL and RUNID_URL are machine dependent
USER   = Elwasif 			# Optional, if missing the unix username is used
PORTAL_URL = 
RUNID_URL = 

# A run comment picked up by the portal - this should describe your run for easy identification
RUN_COMMENT = Hello World 

########################################################
#            Plasma State Config                       #
########################################################

# Specification of plasma state files

# Where to put plasma state files as the simulation evolves 
PLASMA_STATE_WORK_DIR = $SIM_ROOT/work/plasma_state

# Construct names for plasma state filesâ below is the list of all the plasma state
# files that have been used so far.  Most components only use one or two
CURRENT_STATE = ${SIM_NAME}_ps.cdf
PRIOR_STATE = ${SIM_NAME}_psp.cdf
NEXT_STATE = ${SIM_NAME}_psn.cdf
CURRENT_EQDSK = ${SIM_NAME}_ps.geq
CURRENT_CQL = ${SIM_NAME}_ps_CQL.nc
CURRENT_DQL = ${SIM_NAME}_ps_DQL.nc
CURRENT_JSDSK = ${SIM_NAME}_ps.jso

# Specify what files constitute the plasma state - N.B. not all components need all files
PLASMA_STATE_FILES1 = $CURRENT_STATE $PRIOR_STATE  $NEXT_STATE  
PLASMA_STATE_FILES = 

########################################################
#            Ports Configuration                       #
########################################################

# Names of ports to be used.  An implementation and configuration must be specified for
# each port

[PORTS]
   NAMES = DRIVER WORKER 
   
# DRIVER port is called by the framework.  It is required, causes exception.

   [[DRIVER]]                                       # REQUIRED Port section 
      IMPLEMENTATION = HELLO_DRIVER
                                                    
# INIT port is called by the framework.  It typically produces the very first set of
# plasma state files for SIMULATION_MODE = NORMAL.  It does not raise and exception
# if missing.
                                                    
   [[INIT]]   
      IMPLEMENTATION =  

# Specification of IMPLEMENTATION for each physics port called out in PORTS list.
# Additional specifications may be present that are not in the PORTS list

  [[WORKER]]
      IMPLEMENTATION = HELLO_WORKER 

########################################################
#            Component Configuration                   #
########################################################

# Specification of configuration for each port called out in PORTS list.
# Additional specifications may be present that are not in the PORTS list
# NAME variable MUST match the name of the python class that implements the component

[HELLO_DRIVER]
    CLASS = DRIVERS             # CLASS, SUB_CLASS and NAME are used to create component name 
    SUB_CLASS = HELLO           # and directory structure of results.
    NAME = HelloDriver
    NPROC = 1                   # number of processes the binary needs to run
    BIN_PATH = $IPS_ROOT/bin    # path to component script
    INPUT_DIR = $IPS_ROOT/components/drivers/hello
    INPUT_FILES = 
    OUTPUT_FILES =  
    SCRIPT = $BIN_PATH/hello_driver.py

[HELLO_WORKER]
    CLASS = WORKERS
    SUB_CLASS = HELLO
    NAME = HelloWorker
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/drivers/hello
    INPUT_FILES = 
    OUTPUT_FILES =  
    SCRIPT = $BIN_PATH/hello_worker.py

########################################
#             Time Loop                # 
########################################

# Time loop specification (two modes for now) EXPLICIT | REGULAR
# For MODE = REGULAR, the framework uses the variables START, FINISH, and NSTEP
# For MODE = EXPLICIT, the frame work uses the variable VALUES (space separated list of time values)

[TIME_LOOP]
   MODE = REGULAR
   START = 0 
   FINISH = 10 
   NSTEP  = 10
