IPS_ROOT =  /contrib/ips/        # Root of IPS component and binary tree
OUTPUT_PREFIX = 

RUN_ID = Run_6                   # Indentifier for this simulation run
TOKAMAK_ID = GENERIC               # Identifier for tokamak simulated
SHOT_NUMBER = 00001              # Identifier for specific case for this tokamak (not necessarily a number)

SIM_NAME = ${RUN_ID}_${TOKAMAK_ID}_${SHOT_NUMBER}  # Name of current simulation
SIM_ROOT = $IPS_ROOT/$SIM_NAME                      # Where to put results from this simulation


PLASMA_STATE_WORK_DIR = $SIM_ROOT/work/plasma_state # Where to put plasma state files as the simulation evolves 
CURRENT_STATE = ${SIM_NAME}_ps.cdf
PRIOR_STATE = ${SIM_NAME}_psp.cdf
NEXT_STATE = ${SIM_NAME}_ps_next.cdf
CURRENT_EQDSK = ${SIM_NAME}_ps.geq
CURRENT_CQL = ${SIM_NAME}_ps_CQL.nc
CURRENT_DQL = ${SIM_NAME}_ps_DQL.nc

# Stuff for connecting to the portal - This is machine dependent
COMMENT = Testing the monitor and portal interface	# A run comment picked up by the portal
#TAG = Grouping Tag					# A tag that enables related runs to be retrieved together
#USER   = 					# Optional, if missing the unix username is used
PORTAL_URL = http://swim.gat.com:8000/monitor		# URL for the portal
RUNID_URL  = http://swim.gat.com:4040/runid.esp


#PLASMA_STATE_FILES = $CURRENT_STATE $PRIOR_STATE $CURRENT_EQDSK $NEXT_STATE   # What files constitute the plasma state
PLASMA_STATE_FILES = $CURRENT_STATE $PRIOR_STATE $CURRENT_EQDSK $NEXT_STATE ${SIM_NAME}_ps_CQL.nc  # What files constitute the plasma state

PLATFORM =                                          # Simulation Platform
BATCH_SYSTEM =                                      # Which Batch system to use
MPIRUN = mpirun                                     # How are MPI jobs launched (interactively)
SIMULATION_MODE = SINGLE_STEP | RESTART             # Simulation mode 
INITIALIZATION_MODE =                               # Initialization Mode
MACHINE_CONFIG_FILE =                               # Machine configuration file

[PORTS]
   NAMES = INIT DRIVER MONITOR EPA RF_IC FP
   
   [[DRIVER]]                                       # REQUIRED Port section 
      IMPLEMENTATION = GENERIC_IPS_DRIVER
                                                    
                                                                                                        # How is the simulation initialized 
                                                    # (generate the very first state - if needed)
   [[INIT]]                                         # REQUIRED Port section (check currently 
      IMPLEMENTATION = minimal_state_init 
   
  [[PRE_STEP_LOGIC]]
      IMPLEMENTATION = pre_step_logic 
   
  [[RF_IC]]
      IMPLEMENTATION = change_profiles_RF_IC 

  [[FP]]
      IMPLEMENTATION = minority_model_FP

   [[EPA]]
      IMPLEMENTATION = CHANGE_n_T 
           
   [[MONITOR]]
      IMPLEMENTATION = monitor_comp_2   

# Individual configuration sections

# Component sepcification (entries similar for all components)
# NAME entry MUST match the name of the python class that implements the component

[minimal_state_init]
    CLASS = minimal_state_init
    SUB_CLASS = dbb
    NAME = minimal_state_init
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
        INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = 
        OUTPUT_FILES = $CURRENT_STATE 
    SCRIPT = $BIN_PATH/minimal_state_init.py

[pre_step_logic]
    CLASS = logic
    SUB_CLASS = pre_step_logic
    NAME = pre_step_logic
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
        INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = 
        OUTPUT_FILES = $CURRENT_STATE 
    SCRIPT = $BIN_PATH/pre_step_logic_cc.py

[GENERIC_IPS_DRIVER]
    CLASS = drivers
    SUB_CLASS = dbb
    NAME = generic_driver 
    #number of rf power levels in (MW) must match number of timeloop points
    #power level goes with start of step
    # i.e. first sets power for one to two
    RF_POWER = 1.01   0.1 2.1 0.1
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
        INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = 
        OUTPUT_FILES = 
    SCRIPT = $BIN_PATH/rf_power_driver.py
    
[CHANGE_n_T]
    CLASS = epa
    SUB_CLASS =
    NAME = change_n_T
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = 
        INPUT_FILES = 
        OUTPUT_FILES = 
    SCRIPT = $BIN_PATH/change_n_T_4.py

[change_profiles_RF_IC]
    CLASS = RF_IC 
    SUB_CLASS =
    NAME = change_profiles_RF_IC 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = 
        INPUT_FILES =
        OUTPUT_FILES =
    SCRIPT = $BIN_PATH/change_profiles_RF_IC.py

[minority_model_FP]
    CLASS = fp
    SUB_CLASS = minority_model
    NAME = minority_model_FP 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = minority_model.nml
        OUTPUT_FILES =
    SCRIPT = $BIN_PATH/minority_model_FP_2.py


[monitor_comp_2]
    CLASS = monitor
    SUB_CLASS = 
    NAME = monitor
    NPROC = 1
    W3_DIR = /home/research/sveta/ips_runs 
    W3_BASEURL = http://nucleus.txcorp.com/~sveta/ips
    #W3_DIR = /p/swim/w3_html
    #W3_BASEURL = http://w3.pppl.gov/swim
    TEMPLATE_FILE= template.cdft
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/monitor/dbb_2
    INPUT_FILES = template.cdft
    OUTPUT_FILES = monitor_file.nc
    SCRIPT = $BIN_PATH/monitor_comp_4.py
# RF power specifica,tion in MW--values correspont to time loop values    
# The power levels are those at the at the time given in the loop
 
# Time loop sepecification (two modes for now) EXPLICIT | REGULAR
# For MODE = REGULAR, the framework uses the variables START, FINIS, and NSTEP
# For MODE = EXPLICIT, the frame work uses the variable VALUES (space separated list of time values)



[TIME_LOOP]
   MODE = EXPLICIT
   START = 3.5
   FINISH = 3.7
   NSTEP  = 2
   VALUES = 3.4 3.5 3.6 3.7
#   VALUES = 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4
